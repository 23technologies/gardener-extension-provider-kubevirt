// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-kubevirt/pkg/kubevirt (interfaces: ClientFactory,DataVolumeManager,NetworkManager)

// Package kubevirt is a generated GoMock package.
package kubevirt

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/k8snetworkplumbingwg/network-attachment-definition-client/pkg/apis/k8s.cni.cncf.io/v1"
	v1alpha1 "kubevirt.io/containerized-data-importer/pkg/apis/core/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockClientFactory) GetClient(arg0 []byte) (client.Client, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientFactoryMockRecorder) GetClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientFactory)(nil).GetClient), arg0)
}

// MockDataVolumeManager is a mock of DataVolumeManager interface.
type MockDataVolumeManager struct {
	ctrl     *gomock.Controller
	recorder *MockDataVolumeManagerMockRecorder
}

// MockDataVolumeManagerMockRecorder is the mock recorder for MockDataVolumeManager.
type MockDataVolumeManagerMockRecorder struct {
	mock *MockDataVolumeManager
}

// NewMockDataVolumeManager creates a new mock instance.
func NewMockDataVolumeManager(ctrl *gomock.Controller) *MockDataVolumeManager {
	mock := &MockDataVolumeManager{ctrl: ctrl}
	mock.recorder = &MockDataVolumeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataVolumeManager) EXPECT() *MockDataVolumeManagerMockRecorder {
	return m.recorder
}

// CreateOrUpdateDataVolume mocks base method.
func (m *MockDataVolumeManager) CreateOrUpdateDataVolume(arg0 context.Context, arg1 []byte, arg2 string, arg3 map[string]string, arg4 v1alpha1.DataVolumeSpec) (*v1alpha1.DataVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateDataVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*v1alpha1.DataVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateDataVolume indicates an expected call of CreateOrUpdateDataVolume.
func (mr *MockDataVolumeManagerMockRecorder) CreateOrUpdateDataVolume(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDataVolume", reflect.TypeOf((*MockDataVolumeManager)(nil).CreateOrUpdateDataVolume), arg0, arg1, arg2, arg3, arg4)
}

// DeleteDataVolume mocks base method.
func (m *MockDataVolumeManager) DeleteDataVolume(arg0 context.Context, arg1 []byte, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataVolume indicates an expected call of DeleteDataVolume.
func (mr *MockDataVolumeManagerMockRecorder) DeleteDataVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataVolume", reflect.TypeOf((*MockDataVolumeManager)(nil).DeleteDataVolume), arg0, arg1, arg2)
}

// ListDataVolumes mocks base method.
func (m *MockDataVolumeManager) ListDataVolumes(arg0 context.Context, arg1 []byte, arg2 map[string]string) (*v1alpha1.DataVolumeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataVolumes", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.DataVolumeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataVolumes indicates an expected call of ListDataVolumes.
func (mr *MockDataVolumeManagerMockRecorder) ListDataVolumes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataVolumes", reflect.TypeOf((*MockDataVolumeManager)(nil).ListDataVolumes), arg0, arg1, arg2)
}

// MockNetworkManager is a mock of NetworkManager interface.
type MockNetworkManager struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkManagerMockRecorder
}

// MockNetworkManagerMockRecorder is the mock recorder for MockNetworkManager.
type MockNetworkManagerMockRecorder struct {
	mock *MockNetworkManager
}

// NewMockNetworkManager creates a new mock instance.
func NewMockNetworkManager(ctrl *gomock.Controller) *MockNetworkManager {
	mock := &MockNetworkManager{ctrl: ctrl}
	mock.recorder = &MockNetworkManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkManager) EXPECT() *MockNetworkManagerMockRecorder {
	return m.recorder
}

// CreateOrUpdateNetworkAttachmentDefinition mocks base method.
func (m *MockNetworkManager) CreateOrUpdateNetworkAttachmentDefinition(arg0 context.Context, arg1 []byte, arg2 string, arg3 map[string]string, arg4 string) (*v1.NetworkAttachmentDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateNetworkAttachmentDefinition", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*v1.NetworkAttachmentDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateNetworkAttachmentDefinition indicates an expected call of CreateOrUpdateNetworkAttachmentDefinition.
func (mr *MockNetworkManagerMockRecorder) CreateOrUpdateNetworkAttachmentDefinition(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateNetworkAttachmentDefinition", reflect.TypeOf((*MockNetworkManager)(nil).CreateOrUpdateNetworkAttachmentDefinition), arg0, arg1, arg2, arg3, arg4)
}

// DeleteNetworkAttachmentDefinition mocks base method.
func (m *MockNetworkManager) DeleteNetworkAttachmentDefinition(arg0 context.Context, arg1 []byte, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkAttachmentDefinition", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkAttachmentDefinition indicates an expected call of DeleteNetworkAttachmentDefinition.
func (mr *MockNetworkManagerMockRecorder) DeleteNetworkAttachmentDefinition(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkAttachmentDefinition", reflect.TypeOf((*MockNetworkManager)(nil).DeleteNetworkAttachmentDefinition), arg0, arg1, arg2)
}

// GetNetworkAttachmentDefinition mocks base method.
func (m *MockNetworkManager) GetNetworkAttachmentDefinition(arg0 context.Context, arg1 []byte, arg2, arg3 string) (*v1.NetworkAttachmentDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAttachmentDefinition", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.NetworkAttachmentDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAttachmentDefinition indicates an expected call of GetNetworkAttachmentDefinition.
func (mr *MockNetworkManagerMockRecorder) GetNetworkAttachmentDefinition(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAttachmentDefinition", reflect.TypeOf((*MockNetworkManager)(nil).GetNetworkAttachmentDefinition), arg0, arg1, arg2, arg3)
}

// ListNetworkAttachmentDefinitions mocks base method.
func (m *MockNetworkManager) ListNetworkAttachmentDefinitions(arg0 context.Context, arg1 []byte, arg2 map[string]string) (*v1.NetworkAttachmentDefinitionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAttachmentDefinitions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.NetworkAttachmentDefinitionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkAttachmentDefinitions indicates an expected call of ListNetworkAttachmentDefinitions.
func (mr *MockNetworkManagerMockRecorder) ListNetworkAttachmentDefinitions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAttachmentDefinitions", reflect.TypeOf((*MockNetworkManager)(nil).ListNetworkAttachmentDefinitions), arg0, arg1, arg2)
}
