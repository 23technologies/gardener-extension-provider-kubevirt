// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-kubevirt/pkg/kubevirt (interfaces: ClientFactory,DataVolumeManager)

// Package kubevirt is a generated GoMock package.
package kubevirt

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "kubevirt.io/containerized-data-importer/pkg/apis/core/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockClientFactory) GetClient(arg0 []byte) (client.Client, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientFactoryMockRecorder) GetClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientFactory)(nil).GetClient), arg0)
}

// MockDataVolumeManager is a mock of DataVolumeManager interface.
type MockDataVolumeManager struct {
	ctrl     *gomock.Controller
	recorder *MockDataVolumeManagerMockRecorder
}

// MockDataVolumeManagerMockRecorder is the mock recorder for MockDataVolumeManager.
type MockDataVolumeManagerMockRecorder struct {
	mock *MockDataVolumeManager
}

// NewMockDataVolumeManager creates a new mock instance.
func NewMockDataVolumeManager(ctrl *gomock.Controller) *MockDataVolumeManager {
	mock := &MockDataVolumeManager{ctrl: ctrl}
	mock.recorder = &MockDataVolumeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataVolumeManager) EXPECT() *MockDataVolumeManagerMockRecorder {
	return m.recorder
}

// CreateOrUpdateDataVolume mocks base method.
func (m *MockDataVolumeManager) CreateOrUpdateDataVolume(arg0 context.Context, arg1 []byte, arg2 string, arg3 map[string]string, arg4 v1alpha1.DataVolumeSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateDataVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateDataVolume indicates an expected call of CreateOrUpdateDataVolume.
func (mr *MockDataVolumeManagerMockRecorder) CreateOrUpdateDataVolume(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDataVolume", reflect.TypeOf((*MockDataVolumeManager)(nil).CreateOrUpdateDataVolume), arg0, arg1, arg2, arg3, arg4)
}

// DeleteDataVolume mocks base method.
func (m *MockDataVolumeManager) DeleteDataVolume(arg0 context.Context, arg1 []byte, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataVolume indicates an expected call of DeleteDataVolume.
func (mr *MockDataVolumeManagerMockRecorder) DeleteDataVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataVolume", reflect.TypeOf((*MockDataVolumeManager)(nil).DeleteDataVolume), arg0, arg1, arg2)
}

// GetDataVolume mocks base method.
func (m *MockDataVolumeManager) GetDataVolume(arg0 context.Context, arg1 []byte, arg2 string) (*v1alpha1.DataVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.DataVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataVolume indicates an expected call of GetDataVolume.
func (mr *MockDataVolumeManagerMockRecorder) GetDataVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataVolume", reflect.TypeOf((*MockDataVolumeManager)(nil).GetDataVolume), arg0, arg1, arg2)
}

// ListDataVolumes mocks base method.
func (m *MockDataVolumeManager) ListDataVolumes(arg0 context.Context, arg1 []byte, arg2 ...client.ListOption) (*v1alpha1.DataVolumeList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataVolumes", varargs...)
	ret0, _ := ret[0].(*v1alpha1.DataVolumeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataVolumes indicates an expected call of ListDataVolumes.
func (mr *MockDataVolumeManagerMockRecorder) ListDataVolumes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataVolumes", reflect.TypeOf((*MockDataVolumeManager)(nil).ListDataVolumes), varargs...)
}
